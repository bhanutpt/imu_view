

# Import required modules.
import numpy as np
import time

# Import local modules.
from mcrc16 import modbus_crc16 as crc16

# Declare the general TX frame header data type.
header_tx_t = np.dtype([('SOH', 'u1'), ('L', 'u1'), ('FT', 'u1'), ('CMD', 'u1')])

# Functions for constructing the tx frames.
def get_tx_frame(SOH, L, FT, CMD, data_bytes):
    """
    Constructs the frame by combining the frame header, data bytes, and CRC.
    """
    fr = np.array([(SOH, L, FT, CMD)], dtype=header_tx_t)
    header_bytes = fr.tobytes()
    crc = crc16(header_bytes + data_bytes)
    frame = header_bytes + data_bytes + crc.to_bytes(2, byteorder='big')
    return frame

# Functions for constructing the frames for different commands.
# Get MAC Address - 0x01
def get_mac_addr_frame(data):
    """
    Constructs the frame to get the MAC address of the device.
    """
    SOH = 0x01
    L = len(data) + 6
    FT = 0xF1
    CMD = 0x01
    return get_tx_frame(SOH, L, FT, CMD, data)

# Set dog collar position - 0x04
# Valid range for data include 1 to 12.
def set_dog_collar_pos_frame(data):
    """
    Constructs the frame to set the dog collar position.
    Valid range for data include 1 to 12.
    """
    SOH = 0x01
    L = len(data) + 6
    FT = 0xF1
    CMD = 0x04
    return get_tx_frame(SOH, L, FT, CMD, data)

# Get epoch real time clock in device - 0x05
def get_epoch_time_frame(data):
    """
    Constructs the frame to get the epoch real time clock in the device.
    """
    SOH = 0x01
    L = len(data) + 6
    FT = 0xF1
    CMD = 0x05
    return get_tx_frame(SOH, L, FT, CMD, data)

# Set epoch real time clock in device - 0x06
def set_epoch_time_frame(data):
    """ 
    Constructs the frame to set the epoch real time clock in the device.
    """
    SOH = 0x01
    L = len(data) + 6
    FT = 0xF1
    CMD = 0x06
    return get_tx_frame(SOH, L, FT, CMD, data)

# Start/Stop Continuous Recording Session (BLE Offline) - 0x07
# 0 to Stop, 1 to Start
def start_stop_cont_rec_sess_frame(data):
    SOH = 0x01
    L = len(data) + 6
    FT = 0xF1
    CMD = 0x07
    return get_tx_frame(SOH, L, FT, CMD, data)

# Start/Stop activity data harvesting - 0x08
# 0 to Stop, 1 to Start
def start_stop_act_data_harvest_frame(data):
    SOH = 0x01
    L = len(data) + 6
    FT = 0xF1
    CMD = 0x08
    return get_tx_frame(SOH, L, FT, CMD, data)

# Start/Stop periodic dashbord status information - 0x09
# 0 to Stop, 1 to Start
def start_stop_periodic_dash_info_frame(data):
    SOH = 0x01
    L = len(data) + 6
    FT = 0xF1
    CMD = 0x09
    return get_tx_frame(SOH, L, FT, CMD, data)

# BLE status show command - 0x0A
def ble_status_show_frame(data):
    SOH = 0x01
    L = len(data) + 6
    FT = 0xF1
    CMD = 0x0A
    return get_tx_frame(SOH, L, FT, CMD, data)

 # BLE connected show command - 0x0B
def ble_connected_show_frame(data):
    SOH = 0x01
    L = len(data) + 6
    FT = 0xF1
    CMD = 0x0B
    return get_tx_frame(SOH, L, FT, CMD, data)

# Factory reset command - 0x0C   
def factory_reset_frame(data):
    SOH = 0x01
    L = len(data) + 6
    FT = 0xF1
    CMD = 0x0C
    return get_tx_frame(SOH, L, FT, CMD, data)

# Reboot command - 0x0D
def reboot_frame(data):
    SOH = 0x01
    L = len(data) + 6
    FT = 0xF1
    CMD = 0x0D
    return get_tx_frame(SOH, L, FT, CMD, data)

# Start/Stop recording session - 0x10
# 0 to Stop, 1 to Start
# Session UID should be part of the data.
def start_stop_rec_sess_frame(data):
    SOH = 0x01
    L = len(data) + 6
    FT = 0xF1
    CMD = 0x10
    return get_tx_frame(SOH, L, FT, CMD, data)

# Read recording session details (raw data records) - 0x11
# Session UID should be part of the data.
def read_rec_sess_details_frame(data):
    SOH = 0x01
    L = len(data) + 6
    FT = 0xF1
    CMD = 0x11
    return get_tx_frame(SOH, L, FT, CMD, data)

# Read recording session data (raw record data) - 0x12
# Session UID should be part of the data.
# Raw record number should be part of the data.
def read_rec_sess_data_frame(data):
    SOH = 0x01
    L = len(data) + 6
    FT = 0xF1
    CMD = 0x12
    return get_tx_frame(SOH, L, FT, CMD, data)

# Read recording session details (activity data records) - 0x13
# Session UID should be part of the data.
def read_rec_sess_act_details_frame(data):
    SOH = 0x01
    L = len(data) + 6
    FT = 0xF1
    CMD = 0x13
    return get_tx_frame(SOH, L, FT, CMD, data)

# Read recording session data (activity record data) - 0x14
# Session UID should be part of the data.
# Activity record number should be part of the data.
def read_rec_sess_act_data_frame(data):
    SOH = 0x01
    L = len(data) + 6
    FT = 0xF1
    CMD = 0x14
    return get_tx_frame(SOH, L, FT, CMD, data)    

# Read device log info - 0x15
# Log number should be part of the data.
def read_dev_log_info_frame(data):
    SOH = 0x01
    L = len(data) + 6
    FT = 0xF1
    CMD = 0x15
    return get_tx_frame(SOH, L, FT, CMD, data)

# Read dashboard info - 0x16
def read_dash_info_frame(data):
    SOH = 0x01
    L = len(data) + 6
    FT = 0xF1
    CMD = 0x16
    return get_tx_frame(SOH, L, FT, CMD, data)

# Start/Stop BLE live activity session command - 0x17
# 0 to Stop, 1 to Start
def start_stop_ble_live_act_sess_frame(data):
    SOH = 0x01
    L = len(data) + 6
    FT = 0xF1
    CMD = 0x17
    return get_tx_frame(SOH, L, FT, CMD, data)

# Start/Stop BLE live raw IMU recording command (IMU raw data) - 0x18
# 0 to Stop, 1 to Start
def start_stop_ble_live_raw_imu_rec_frame(data):
    SOH = 0x01
    L = len(data) + 6
    FT = 0xF1
    CMD = 0x18
    return get_tx_frame(SOH, L, FT, CMD, data)    

# Start Disco light command - 0x19
def start_disco_light_frame(data):
    SOH = 0x01
    L = len(data) + 6
    FT = 0xF1
    CMD = 0x19
    return get_tx_frame(SOH, L, FT, CMD, data)

# Set dog size command - 0x1A
# Dog size should be part of the data. 
def set_dog_size_frame(data):
    SOH = 0x01
    L = len(data) + 6
    FT = 0xF1
    CMD = 0x1A
    return get_tx_frame(SOH, L, FT, CMD, data)

# Get Continuous Recording Session Status - 0x1B
def get_cont_rec_sess_status_frame(data):
    SOH = 0x01
    L = len(data) + 6
    FT = 0xF1
    CMD = 0x1B
    return get_tx_frame(SOH, L, FT, CMD, data)

# Read Continuous Recording Session Details - 0x1C
def read_cont_rec_sess_details_frame(data):
    SOH = 0x01
    L = len(data) + 6
    FT = 0xF1
    CMD = 0x1C
    return get_tx_frame(SOH, L, FT, CMD, data)

# Read Raw Data Chunk - 0x1D
def read_raw_data_chunk_frame(data):
    SOH = 0x01
    L = len(data) + 6
    FT = 0xF1
    CMD = 0x1D
    return get_tx_frame(SOH, L, FT, CMD, data)

# Delete Raw data chunk - 0x1E
def delete_raw_data_chunk_frame(data):
    SOH = 0x01
    L = len(data) + 6
    FT = 0xF1
    CMD = 0x1E
    return get_tx_frame(SOH, L, FT, CMD, data)

# Delete recording session - 0x1F
def delete_rec_sess_frame(data):
    SOH = 0x01
    L = len(data) + 6
    FT = 0xF1
    CMD = 0x1F
    return get_tx_frame(SOH, L, FT, CMD, data)


# Testing the module when the file run in standalone mode.
if __name__ == "__main__":  
    data = bytes.fromhex('00')  
    b_str = get_mac_addr_frame(data)

    # Print the frame in hex format.
    hex_str = ' '.join(format(x, '02x') for x in b_str)
    print(hex_str)


